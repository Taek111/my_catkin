# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from erp42/input.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class input(genpy.Message):
  _md5sum = "33d5d4e4e40e9f892c268f2f4f3ea626"
  _type = "erp42/input"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool Auto
bool Manual
bool ESTOP
int32 Gear
float64 Speed_mps
float64 Speed_kph
int32 Steer
float64 Steer_degree
int32  Brake
int32 Alive

"""
  __slots__ = ['Auto','Manual','ESTOP','Gear','Speed_mps','Speed_kph','Steer','Steer_degree','Brake','Alive']
  _slot_types = ['bool','bool','bool','int32','float64','float64','int32','float64','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Auto,Manual,ESTOP,Gear,Speed_mps,Speed_kph,Steer,Steer_degree,Brake,Alive

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(input, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.Auto is None:
        self.Auto = False
      if self.Manual is None:
        self.Manual = False
      if self.ESTOP is None:
        self.ESTOP = False
      if self.Gear is None:
        self.Gear = 0
      if self.Speed_mps is None:
        self.Speed_mps = 0.
      if self.Speed_kph is None:
        self.Speed_kph = 0.
      if self.Steer is None:
        self.Steer = 0
      if self.Steer_degree is None:
        self.Steer_degree = 0.
      if self.Brake is None:
        self.Brake = 0
      if self.Alive is None:
        self.Alive = 0
    else:
      self.Auto = False
      self.Manual = False
      self.ESTOP = False
      self.Gear = 0
      self.Speed_mps = 0.
      self.Speed_kph = 0.
      self.Steer = 0
      self.Steer_degree = 0.
      self.Brake = 0
      self.Alive = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3Bi2did2i().pack(_x.Auto, _x.Manual, _x.ESTOP, _x.Gear, _x.Speed_mps, _x.Speed_kph, _x.Steer, _x.Steer_degree, _x.Brake, _x.Alive))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 43
      (_x.Auto, _x.Manual, _x.ESTOP, _x.Gear, _x.Speed_mps, _x.Speed_kph, _x.Steer, _x.Steer_degree, _x.Brake, _x.Alive,) = _get_struct_3Bi2did2i().unpack(str[start:end])
      self.Auto = bool(self.Auto)
      self.Manual = bool(self.Manual)
      self.ESTOP = bool(self.ESTOP)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3Bi2did2i().pack(_x.Auto, _x.Manual, _x.ESTOP, _x.Gear, _x.Speed_mps, _x.Speed_kph, _x.Steer, _x.Steer_degree, _x.Brake, _x.Alive))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 43
      (_x.Auto, _x.Manual, _x.ESTOP, _x.Gear, _x.Speed_mps, _x.Speed_kph, _x.Steer, _x.Steer_degree, _x.Brake, _x.Alive,) = _get_struct_3Bi2did2i().unpack(str[start:end])
      self.Auto = bool(self.Auto)
      self.Manual = bool(self.Manual)
      self.ESTOP = bool(self.ESTOP)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3Bi2did2i = None
def _get_struct_3Bi2did2i():
    global _struct_3Bi2did2i
    if _struct_3Bi2did2i is None:
        _struct_3Bi2did2i = struct.Struct("<3Bi2did2i")
    return _struct_3Bi2did2i
