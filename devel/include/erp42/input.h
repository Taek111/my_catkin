// Generated by gencpp from file erp42/input.msg
// DO NOT EDIT!


#ifndef ERP42_MESSAGE_INPUT_H
#define ERP42_MESSAGE_INPUT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace erp42
{
template <class ContainerAllocator>
struct input_
{
  typedef input_<ContainerAllocator> Type;

  input_()
    : Auto(false)
    , Manual(false)
    , ESTOP(false)
    , Gear(0)
    , Speed_mps(0.0)
    , Speed_kph(0.0)
    , Steer(0)
    , Steer_degree(0.0)
    , Brake(0)
    , Alive(0)  {
    }
  input_(const ContainerAllocator& _alloc)
    : Auto(false)
    , Manual(false)
    , ESTOP(false)
    , Gear(0)
    , Speed_mps(0.0)
    , Speed_kph(0.0)
    , Steer(0)
    , Steer_degree(0.0)
    , Brake(0)
    , Alive(0)  {
  (void)_alloc;
    }



   typedef uint8_t _Auto_type;
  _Auto_type Auto;

   typedef uint8_t _Manual_type;
  _Manual_type Manual;

   typedef uint8_t _ESTOP_type;
  _ESTOP_type ESTOP;

   typedef int32_t _Gear_type;
  _Gear_type Gear;

   typedef double _Speed_mps_type;
  _Speed_mps_type Speed_mps;

   typedef double _Speed_kph_type;
  _Speed_kph_type Speed_kph;

   typedef int32_t _Steer_type;
  _Steer_type Steer;

   typedef double _Steer_degree_type;
  _Steer_degree_type Steer_degree;

   typedef int32_t _Brake_type;
  _Brake_type Brake;

   typedef int32_t _Alive_type;
  _Alive_type Alive;





  typedef boost::shared_ptr< ::erp42::input_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::erp42::input_<ContainerAllocator> const> ConstPtr;

}; // struct input_

typedef ::erp42::input_<std::allocator<void> > input;

typedef boost::shared_ptr< ::erp42::input > inputPtr;
typedef boost::shared_ptr< ::erp42::input const> inputConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::erp42::input_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::erp42::input_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace erp42

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'erp42': ['/home/taekwon/my_catkin/src/erp42/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::erp42::input_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::erp42::input_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::erp42::input_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::erp42::input_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::erp42::input_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::erp42::input_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::erp42::input_<ContainerAllocator> >
{
  static const char* value()
  {
    return "33d5d4e4e40e9f892c268f2f4f3ea626";
  }

  static const char* value(const ::erp42::input_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x33d5d4e4e40e9f89ULL;
  static const uint64_t static_value2 = 0x2c268f2f4f3ea626ULL;
};

template<class ContainerAllocator>
struct DataType< ::erp42::input_<ContainerAllocator> >
{
  static const char* value()
  {
    return "erp42/input";
  }

  static const char* value(const ::erp42::input_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::erp42::input_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool Auto\n"
"bool Manual\n"
"bool ESTOP\n"
"int32 Gear\n"
"float64 Speed_mps\n"
"float64 Speed_kph\n"
"int32 Steer\n"
"float64 Steer_degree\n"
"int32  Brake\n"
"int32 Alive\n"
"\n"
;
  }

  static const char* value(const ::erp42::input_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::erp42::input_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Auto);
      stream.next(m.Manual);
      stream.next(m.ESTOP);
      stream.next(m.Gear);
      stream.next(m.Speed_mps);
      stream.next(m.Speed_kph);
      stream.next(m.Steer);
      stream.next(m.Steer_degree);
      stream.next(m.Brake);
      stream.next(m.Alive);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct input_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::erp42::input_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::erp42::input_<ContainerAllocator>& v)
  {
    s << indent << "Auto: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Auto);
    s << indent << "Manual: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Manual);
    s << indent << "ESTOP: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ESTOP);
    s << indent << "Gear: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Gear);
    s << indent << "Speed_mps: ";
    Printer<double>::stream(s, indent + "  ", v.Speed_mps);
    s << indent << "Speed_kph: ";
    Printer<double>::stream(s, indent + "  ", v.Speed_kph);
    s << indent << "Steer: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Steer);
    s << indent << "Steer_degree: ";
    Printer<double>::stream(s, indent + "  ", v.Steer_degree);
    s << indent << "Brake: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Brake);
    s << indent << "Alive: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Alive);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ERP42_MESSAGE_INPUT_H
